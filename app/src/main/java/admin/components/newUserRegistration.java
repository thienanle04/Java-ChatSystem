/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package admin.components;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeParseException;
import java.time.format.DateTimeFormatter;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

import server.config.ConfigUtil;
import user.event.PublicEvent;

/**
 *
 * @author Nghiax
 */
public class newUserRegistration extends javax.swing.JPanel {
    private String url;
    private String username;
    private String password;
    private Connection conn;

    /**
     * Creates new form newUserRegistration
     */
    public newUserRegistration() {
        try {
            // Create an instance of ConfigUtil
            ConfigUtil configUtil = new ConfigUtil();
            // Access configuration values
            url = configUtil.getString("url");
            username = configUtil.getString("username");
            password = configUtil.getString("password");
            conn = DriverManager.getConnection(url, username, password);
        } catch (Exception e) {
            // Handle the exception
            e.printStackTrace();
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        NewUserRegistation = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        SortBy = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        startDate = new javax.swing.JTextField();
        endDate = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        FilterByTime = new javax.swing.JButton();
        filterByName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        filterByEmail = new javax.swing.JTextField();

        NewUserRegistation.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {

                },
                new String[] {
                        "Creation Date", "Username", "Email"
                }) {
            Class[] types = new Class[] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[] {
                    false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        try {
            // Truy vấn dữ liệu (đã thêm cột email)
            String query = """
                        SELECT
                            DATE_FORMAT(created_at, '%Y-%m-%d') AS CreationDate,
                            username,
                            email
                        FROM
                            users
                    """;
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            // Lấy model từ bảng
            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) NewUserRegistation
                    .getModel();

            // Xóa dữ liệu cũ nếu có
            model.setRowCount(0);

            // Thêm dữ liệu từ ResultSet vào bảng
            while (rs.next()) {
                Object[] row = new Object[] {
                        rs.getTimestamp("CreationDate"), // Lấy giá trị từ cột CreationDate
                        rs.getString("username"), // Lấy giá trị từ cột username
                        rs.getString("email") // Lấy giá trị từ cột email
                };
                model.addRow(row);
            }

            // Đóng kết nối
            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error fetching data: " + e.getMessage(), "Database Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        jScrollPane5.setViewportView(NewUserRegistation);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Sort by:");

        SortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Creation Date" }));
        SortBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortByActionPerformed(evt);
            }
        });

        jLabel9.setText("Filter by name:");

        jButton4.setText("View Charts");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel15.setText("Start Date (yyyy-mm-dd):");

        startDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDateActionPerformed(evt);
            }
        });

        endDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endDateActionPerformed(evt);
            }
        });

        jLabel16.setText("End Date (yyyy-mm-dd):");

        FilterByTime.setText("Filter by time");
        FilterByTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterByTimeActionPerformed(evt);
            }
        });

        filterByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByNameActionPerformed(evt);
            }
        });

        jLabel2.setText("Filter by email:");

        filterByEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByEmailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel15)
                                                        .addComponent(jLabel16)
                                                        .addComponent(jLabel9))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(filterByName,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 130,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(74, 74, 74)
                                                                .addComponent(jLabel2))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(
                                                                        javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(endDate,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                130,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(startDate,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                                130,
                                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(FilterByTime)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(0, 247, Short.MAX_VALUE)
                                                                .addComponent(jLabel8)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(SortBy,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(filterByEmail,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 152,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(0, 0, Short.MAX_VALUE))))
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 851,
                                                Short.MAX_VALUE)
                                        .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel15)
                                                        .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel8)
                                                        .addComponent(SortBy, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(2, 2, 2)
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel16)
                                                        .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(1, 1, 1)
                                                .addComponent(FilterByTime, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel9)
                                        .addComponent(filterByName, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2)
                                        .addComponent(filterByEmail, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4)));
    }// </editor-fold>//GEN-END:initComponents

    private void filterByEmailActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_filterByEmailActionPerformed
        String filterName = filterByEmail.getText().trim();

        if (!filterName.isEmpty()) {
            if (originalModel == null) {
                originalModel = (DefaultTableModel) NewUserRegistation.getModel();
            }

            DefaultTableModel model = (DefaultTableModel) NewUserRegistation.getModel();

            DefaultTableModel filteredModel = new DefaultTableModel();

            for (int i = 0; i < model.getColumnCount(); i++) {
                filteredModel.addColumn(model.getColumnName(i));
            }

            for (int i = 0; i < model.getRowCount(); i++) {
                String email = model.getValueAt(i, 2).toString();
                if (email.toLowerCase().contains(filterName.toLowerCase())) {
                    filteredModel.addRow(new Object[] {
                            model.getValueAt(i, 0),
                            model.getValueAt(i, 1),
                            model.getValueAt(i, 2),
                    });
                }
            }

            NewUserRegistation.setModel(filteredModel);
        } else {
            NewUserRegistation.setModel(originalModel);
        }
    }// GEN-LAST:event_filterByEmailActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String inputYear = JOptionPane.showInputDialog(null, "Enter the year to view data (yyyy):", "Enter Year",
                JOptionPane.QUESTION_MESSAGE);
        if (inputYear != null && !inputYear.trim().isEmpty()) {
            try {
                int year = Integer.parseInt(inputYear.trim());

                // Query data
                String query = """
                            SELECT
                                MONTH(created_at) AS Month,
                                COUNT(*) AS UserCount
                            FROM
                                users
                            WHERE
                                YEAR(created_at) = ?
                            GROUP BY
                                MONTH(created_at)
                            ORDER BY
                                MONTH(created_at)
                        """;
                PreparedStatement stmt = conn.prepareStatement(query);
                stmt.setInt(1, year);
                ResultSet rs = stmt.executeQuery();

                // Prepare data for the chart
                org.jfree.data.category.DefaultCategoryDataset dataset = new org.jfree.data.category.DefaultCategoryDataset();

                // Initialize an array for default values for all 12 months
                int[] userCounts = new int[12];
                while (rs.next()) {
                    int month = rs.getInt("Month");
                    int userCount = rs.getInt("UserCount");
                    userCounts[month - 1] = userCount; // Store the value for the corresponding month
                }

                // Add data to the dataset, ensuring all 12 columns are included
                for (int i = 0; i < 12; i++) {
                    dataset.addValue(userCounts[i], "Count", "Month " + (i + 1));
                }

                // Create a bar chart
                org.jfree.chart.JFreeChart barChart = org.jfree.chart.ChartFactory.createBarChart(
                        "User Registration Count in " + year,
                        "Month",
                        "Count",
                        dataset);

                // Display the chart
                org.jfree.chart.ChartPanel chartPanel = new org.jfree.chart.ChartPanel(barChart);

                javax.swing.JDialog chartDialog = new javax.swing.JDialog((java.awt.Frame) null, "View Chart", true);
                chartDialog.setDefaultCloseOperation(javax.swing.JDialog.DISPOSE_ON_CLOSE);
                chartDialog.setContentPane(chartPanel);
                chartDialog.setSize(1200, 600);
                chartDialog.setLocationRelativeTo(this);

                chartDialog.setVisible(true);

                // Close connections
                rs.close();
                stmt.close();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid year input!", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error fetching data: " + e.getMessage(), "Database Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "You have not entered a year!", "Notification", JOptionPane.WARNING_MESSAGE);
        }

    }// GEN-LAST:event_jButton4ActionPerformed

    private DefaultTableModel originalModel;

    private void startDateActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_startDateActionPerformed
    }// GEN-LAST:event_startDateActionPerformed

    private void endDateActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_endDateActionPerformed
    }// GEN-LAST:event_endDateActionPerformed

    private void FilterByTimeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_FilterByTimeActionPerformed
        String start = startDate.getText().trim();
        String end = endDate.getText().trim();
        LocalDate _startDate = LocalDate.MIN;
        LocalDate _endDate = LocalDate.MAX;

        // Parse the input dates
        try {
            DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            _startDate = start.isEmpty() ? LocalDate.MIN : LocalDate.parse(start, inputFormatter);
            _endDate = end.isEmpty() ? LocalDate.MAX : LocalDate.parse(end, inputFormatter);
        } catch (DateTimeParseException e) {
            PublicEvent.getInstance().getEventMain().showNotification("Invalid start date format. "
                    + "Please use 'yyyy-MM-dd'.");
        }
        try {
            // Define the table's date format
            DateTimeFormatter tableFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.S");

            if (originalModel == null) {
                originalModel = (DefaultTableModel) NewUserRegistation.getModel();
            }

            DefaultTableModel model = originalModel;
            DefaultTableModel filteredModel = new DefaultTableModel();

            // Add columns to the new model
            for (int i = 0; i < model.getColumnCount(); i++) {
                filteredModel.addColumn(model.getColumnName(i));
            }

            // Filter rows based on timestamps
            for (int i = 0; i < model.getRowCount(); i++) {
                String dateStr = model.getValueAt(i, 0).toString();
                LocalDate creationDate = LocalDate.parse(dateStr, tableFormatter);

                if ((creationDate.isEqual(_startDate) || creationDate.isAfter(_startDate)) &&
                        (creationDate.isEqual(_endDate) || creationDate.isBefore(_endDate))) {
                    filteredModel.addRow(new Object[] {
                            model.getValueAt(i, 0),
                            model.getValueAt(i, 1),
                            model.getValueAt(i, 2),
                    });
                }
            }

            NewUserRegistation.setModel(filteredModel);
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(this,
                    "Please enter valid dates in the format yyyy-MM-dd.",
                    "Invalid Input",
                    JOptionPane.ERROR_MESSAGE);
        }
    }// GEN-LAST:event_FilterByTimeActionPerformed

    private void filterByNameActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_filterByNameActionPerformed
        String filterName = filterByName.getText().trim();

        if (!filterName.isEmpty()) {
            if (originalModel == null) {
                originalModel = (DefaultTableModel) NewUserRegistation.getModel();
            }

            DefaultTableModel model = originalModel;

            DefaultTableModel filteredModel = new DefaultTableModel();

            for (int i = 0; i < model.getColumnCount(); i++) {
                filteredModel.addColumn(model.getColumnName(i));
            }

            for (int i = 0; i < model.getRowCount(); i++) {
                String name = model.getValueAt(i, 1).toString(); // Assuming Name is in column 0
                if (name.toLowerCase().contains(filterName.toLowerCase())) {
                    filteredModel.addRow(new Object[] {
                            model.getValueAt(i, 0),
                            model.getValueAt(i, 1),
                            model.getValueAt(i, 2),
                    });
                }
            }

            NewUserRegistation.setModel(filteredModel);
        } else {
            NewUserRegistation.setModel(originalModel);
        }
    }// GEN-LAST:event_filterByNameActionPerformed

    private void SortByActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_SortByActionPerformed
        DefaultTableModel model = (DefaultTableModel) NewUserRegistation.getModel();

        // Configure a TableRowSorter with custom comparators
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        NewUserRegistation.setRowSorter(sorter);

        // Set a custom comparator for the "Creation Date" column (index 0)
        sorter.setComparator(0, (Object o1, Object o2) -> {
            try {
                java.sql.Timestamp ts1 = (java.sql.Timestamp) o1;
                java.sql.Timestamp ts2 = (java.sql.Timestamp) o2;
                return ts1.compareTo(ts2); // Compare timestamps directly
            } catch (ClassCastException ex) {
                Logger.getLogger(userDetail.class.getName()).log(Level.SEVERE, null, ex);
                return 0; // Treat errors as equal
            }
        });

        // Determine which column to sort based on the selected option
        String selectedOption = (String) SortBy.getSelectedItem();
        int columnIndex = -1;

        if ("Name".equals(selectedOption)) {
            columnIndex = 1; // Name column index
        } else if ("Creation Date".equals(selectedOption)) {
            columnIndex = 0; // Creation Date column index
        }

        // Apply sorting if a valid column is selected
        if (columnIndex != -1) {
            sorter.setSortKeys(Collections.singletonList(new RowSorter.SortKey(columnIndex, SortOrder.ASCENDING)));
            sorter.sort();
        }
    }// GEN-LAST:event_SortByActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FilterByTime;
    private javax.swing.JTable NewUserRegistation;
    private javax.swing.JComboBox<String> SortBy;
    private javax.swing.JTextField endDate;
    private javax.swing.JTextField filterByEmail;
    private javax.swing.JTextField filterByName;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField startDate;
    // End of variables declaration//GEN-END:variables
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package admin.components;

import java.awt.GridLayout;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Calendar;
import java.sql.ResultSet;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nghiax
 */
public class userDetail extends javax.swing.JPanel {

    /**
     * Creates new form userDetail
     */
    public userDetail() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        UserDetails = new javax.swing.JTable();
        add_button = new javax.swing.JButton();
        update_button = new javax.swing.JButton();
        delete_button = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        UserDetails.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {},
                new String[] {
                        "Name", "Username", "Password", "Address", "Date-of-birth", "Gender", "Email", "Lock"
                }) {
            Class[] types = new Class[] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class,
                    java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });

        try {
            // Kết nối đến database
            String url = "jdbc:mysql://localhost:3306/chatsystem?zeroDateTimeBehavior=CONVERT_TO_NULL";
            String user = "admin";
            String password = "*Nghia1692004"; // Thay bằng mật khẩu của bạn
            Connection conn = DriverManager.getConnection(url, user, password);

            // Truy vấn dữ liệu
            String query = "SELECT name, username, password_hash, address, date_of_birth, gender, email, is_locked FROM Users";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            // Lấy model từ bảng
            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) UserDetails.getModel();

            // Xóa dữ liệu cũ nếu có
            model.setRowCount(0);

            // Thêm dữ liệu từ ResultSet vào bảng
            while (rs.next()) {
                Object[] row = new Object[] {
                        rs.getString("name"),
                        rs.getString("username"),
                        rs.getString("password_hash"),
                        rs.getString("address"),
                        rs.getDate("date_of_birth"),
                        rs.getString("gender"),
                        rs.getString("email"),
                        rs.getBoolean("is_locked")
                };
                model.addRow(row);
            }

            // Đóng kết nối
            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error fetching data: " + e.getMessage(), "Database Error",
                    JOptionPane.ERROR_MESSAGE);
        }

        jScrollPane1.setViewportView(UserDetails);

        add_button.setText("Add");
        add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_buttonActionPerformed(evt);
            }
        });

        update_button.setText("Update");
        update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_buttonActionPerformed(evt);
            }
        });

        delete_button.setText("Delete");
        delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_buttonActionPerformed(evt);
            }
        });

        jButton1.setText("Lock/ Unlock");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 697,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(update_button, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(delete_button, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(add_button, javax.swing.GroupLayout.PREFERRED_SIZE, 195,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton1)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10,
                                        Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(delete_button)
                                        .addComponent(update_button)
                                        .addComponent(add_button)
                                        .addComponent(jButton1))));
    }// </editor-fold>//GEN-END:initComponents

    private void add_buttonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_add_buttonActionPerformed
        // TODO add your handling code here:
        JTextField usernameField = new JTextField(10);
        JTextField passwordField = new JTextField(10);
        JTextField nameField = new JTextField(10);
        JTextField addressField = new JTextField(10);
        JTextField dobField = new JTextField(10);
        JTextField genderField = new JTextField(10);
        JTextField emailField = new JTextField(10);

        JPanel addUserPanel = new JPanel();
        addUserPanel.setLayout(new GridLayout(7, 2));
        addUserPanel.add(new JLabel("Username:"));
        addUserPanel.add(usernameField);
        addUserPanel.add(new JLabel("Password:"));
        addUserPanel.add(passwordField);
        addUserPanel.add(new JLabel("Name:"));
        addUserPanel.add(nameField);
        addUserPanel.add(new JLabel("Address:"));
        addUserPanel.add(addressField);
        addUserPanel.add(new JLabel("Date of Birth:"));
        addUserPanel.add(dobField);
        addUserPanel.add(new JLabel("Gender:"));
        addUserPanel.add(genderField);
        addUserPanel.add(new JLabel("Email:"));
        addUserPanel.add(emailField);

        int result = JOptionPane.showConfirmDialog(this, addUserPanel, "Add New User", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            String username = usernameField.getText();
            String password= passwordField.getText();
            String name = nameField.getText();
            String address = addressField.getText();
            String dob = dobField.getText();
            String gender = genderField.getText();
            String email = emailField.getText();

            if (!username.isEmpty() && !name.isEmpty()) {
                DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();
                model.addRow(new Object[] { username, name, password, address, dob, gender, email });

                try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/chatsystem?zeroDateTimeBehavior=CONVERT_TO_NULL", "admin", "*Nghia1692004")) {
                String sql = "INSERT INTO Users (username, name, address, date_of_birth, gender, email, password_hash) VALUES (?, ?, ?, ?, ?, ?, ?)";
                try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                        pstmt.setString(1, username);
                        pstmt.setString(2, name);
                        pstmt.setString(3, address);
                        pstmt.setString(4, dob);
                        pstmt.setString(5, gender);
                        pstmt.setString(6, email);
                        pstmt.setString(7, password);
                        pstmt.executeUpdate();
                    }

                    // Xóa các trường nhập liệu sau khi thêm
                    usernameField.setText("");
                    nameField.setText("");
                    addressField.setText("");
                    dobField.setText("");
                    passwordField.setText("");
                    genderField.setText("");
                    emailField.setText("");

                    JOptionPane.showMessageDialog(this, "User added successfully!");
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error adding user: " + e.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Username and Name are required.");
            }
        }
    }// GEN-LAST:event_add_buttonActionPerformed

    private void update_buttonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_update_buttonActionPerformed
        DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();

        int selectedRow = UserDetails.getSelectedRow();

        if (selectedRow >= 0) {
            String currentUsername = model.getValueAt(selectedRow, 1).toString();
            String currentPassword = model.getValueAt(selectedRow, 2).toString();
            String currentName = model.getValueAt(selectedRow, 0).toString();
            String currentAddress = model.getValueAt(selectedRow, 3).toString();
            String currentDOB = model.getValueAt(selectedRow, 4).toString();
            String currentGender = model.getValueAt(selectedRow, 5).toString();
            String currentEmail = model.getValueAt(selectedRow, 6).toString();

            JTextField usernameField = new JTextField(currentUsername);
            JTextField passwordField = new JTextField(currentPassword);
            JTextField nameField = new JTextField(currentName);
            JTextField addressField = new JTextField(currentAddress);
            JTextField dobField = new JTextField(currentDOB);
            JTextField genderField = new JTextField(currentGender);
            JTextField emailField = new JTextField(currentEmail);

            JPanel updatePanel = new JPanel(new GridLayout(7, 2));
            updatePanel.add(new JLabel("Username:"));
            updatePanel.add(usernameField);
            updatePanel.add(new JLabel("Password:"));
            updatePanel.add(passwordField);
            updatePanel.add(new JLabel("Name:"));
            updatePanel.add(nameField);
            updatePanel.add(new JLabel("Address:"));
            updatePanel.add(addressField);
            updatePanel.add(new JLabel("Date of Birth(yyyy-MM-dd):"));
            updatePanel.add(dobField);
            updatePanel.add(new JLabel("Gender:"));
            updatePanel.add(genderField);
            updatePanel.add(new JLabel("Email:"));
            updatePanel.add(emailField);

            int result = JOptionPane.showConfirmDialog(this, updatePanel, "Update User", JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE);

            if (result == JOptionPane.OK_OPTION) {
                String newUsername = usernameField.getText();
                String newPassword = passwordField.getText();
                String newName = nameField.getText();
                String newAddress = addressField.getText();
                String newDOB = dobField.getText();
                String newGender = genderField.getText();
                String newEmail = emailField.getText();

                model.setValueAt(newUsername, selectedRow, 1);
                model.setValueAt(newPassword, selectedRow, 2);
                model.setValueAt(newName, selectedRow, 0);
                model.setValueAt(newAddress, selectedRow, 3);
                model.setValueAt(newDOB, selectedRow, 4);
                model.setValueAt(newGender, selectedRow, 5);
                model.setValueAt(newEmail, selectedRow, 6);

                // Cập nhật dữ liệu vào cơ sở dữ liệu
                String updateSQL = "UPDATE Users SET username = ?, name = ?, address = ?, date_of_birth = ?, gender = ?, email = ?, password_hash = ? WHERE username = ?";
                try (
                    Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/chatsystem?zeroDateTimeBehavior=CONVERT_TO_NULL", "admin", "*Nghia1692004");
                    PreparedStatement pstmt = conn.prepareStatement(updateSQL)
                ) {
                    // Gán giá trị cho câu lệnh
                    pstmt.setString(1, newUsername);
                    pstmt.setString(2, newName);
                    pstmt.setString(3, newAddress);
                    pstmt.setString(4, newDOB);
                    pstmt.setString(5, newGender);
                    pstmt.setString(6, newEmail);
                    pstmt.setString(7, newPassword);
                    pstmt.setString(8, currentUsername); // Sử dụng `currentUsername` để xác định bản ghi cũ

                    // Thực thi câu lệnh SQL
                    int rowsAffected = pstmt.executeUpdate();

                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "User updated successfully!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Error updating user.");
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a user to update.");
        }
    }// GEN-LAST:event_update_buttonActionPerformed

    private void delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_delete_buttonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();

        int selectedRow = UserDetails.getSelectedRow();
        String username = (String) model.getValueAt(selectedRow, 1);
        if (selectedRow >= 0) {
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this user?",
                    "Confirm Delete", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/chatsystem?zeroDateTimeBehavior=CONVERT_TO_NULL", "admin", "*Nghia1692004")) {
                
                    String deleteUserSql = "DELETE FROM Users WHERE username = ?";
                    try (PreparedStatement pstmt2 = conn.prepareStatement(deleteUserSql)) {
                        pstmt2.setString(1, username);
                        System.out.println("Deleting user with username: " + username);
                        pstmt2.executeUpdate();
                    }

                    // Remove the user from the JTable
                    model.removeRow(selectedRow);

                    JOptionPane.showMessageDialog(this, "User and related data deleted successfully!");
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error deleting user and related data: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a user to delete.");
        }
    }// GEN-LAST:event_delete_buttonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();

        int selectedRow = UserDetails.getSelectedRow();

        if (selectedRow != -1) {
            Boolean lock = (Boolean) model.getValueAt(selectedRow, 7);
            Boolean newLock = !lock;
            model.setValueAt(newLock, selectedRow, 7);

            // Get the username for database identification
            String username = model.getValueAt(selectedRow, 1).toString();

            // Update the database
            try (Connection conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/chatsystem?zeroDateTimeBehavior=CONVERT_TO_NULL",
                    "admin", 
                    "*Nghia1692004")) {

                String sql = "UPDATE Users SET is_locked = ? WHERE username = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                    pstmt.setBoolean(1, newLock); // Set the new lock value
                    pstmt.setString(2, username); // Identify the user by username
                    int rowsAffected = pstmt.executeUpdate();

                    if (rowsAffected > 0) {
                        System.out.println("Database updated successfully for user: " + username);
                    } else {
                        System.out.println("No rows updated for user: " + username);
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error updating database: " + e.getMessage());
            }
        } else {
            System.out.println("No row selected.");
        }
    }// GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable UserDetails;
    private javax.swing.JButton add_button;
    private javax.swing.JButton delete_button;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton update_button;
    // End of variables declaration//GEN-END:variables
}
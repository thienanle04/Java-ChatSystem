/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package admin.components;

import java.awt.GridLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Collections;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

import server.config.ConfigUtil;

import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Nghiax
 */
public class userDetail extends javax.swing.JPanel {
    private String url;
    private String username;
    private String password;
    private Connection conn;

    /**
     * Creates new form userDetail
     */
    public userDetail() {
        try {
            // Create an instance of ConfigUtil
            ConfigUtil configUtil = new ConfigUtil();
            // Access configuration values
            url = configUtil.getString("url");
            System.out.println("url" + url);
            username = configUtil.getString("username");
            password = configUtil.getString("password");
            conn = DriverManager.getConnection(url, username, password);
        } catch (Exception e) {
            // Handle the exception
            e.printStackTrace();
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        UserDetails = new javax.swing.JTable();
        add_button = new javax.swing.JButton();
        update_button = new javax.swing.JButton();
        delete_button = new javax.swing.JButton();
        lock = new javax.swing.JButton();
        UpdatePassword = new javax.swing.JButton();
        filterByName = new javax.swing.JTextField();
        filterByUsername = new javax.swing.JTextField();
        status = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sortBy = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        resetPassword = new javax.swing.JButton();
        setRoleAdmin = new javax.swing.JButton();

        UserDetails.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {

                },
                new String[] {
                        "Name", "Username", "Password", "Address", "Date-of-birth", "Gender", "Email", "Status", "Lock",
                        "Role", "Creation Date"
                }) {
            Class[] types = new Class[] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class,
                    java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class,
                    java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[] {
                    false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        reloadUserDetail();
        jScrollPane1.setViewportView(UserDetails);

        add_button.setText("Add");
        add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_buttonActionPerformed(evt);
            }
        });

        update_button.setText("Update");
        update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_buttonActionPerformed(evt);
            }
        });

        delete_button.setText("Delete");
        delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_buttonActionPerformed(evt);
            }
        });

        lock.setText("Lock/ Unlock");
        lock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lockActionPerformed(evt);
            }
        });

        UpdatePassword.setText("Update Password");
        UpdatePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatePasswordActionPerformed(evt);
            }
        });

        filterByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByNameActionPerformed(evt);
            }
        });

        filterByUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByUsernameActionPerformed(evt);
            }
        });

        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "online", "offline" }));
        status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusActionPerformed(evt);
            }
        });

        jLabel1.setText("Status");

        jLabel2.setText("Sort By");

        sortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Creation Date" }));
        sortBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByActionPerformed(evt);
            }
        });

        jLabel3.setText("Filter By Username");

        jLabel4.setText("Filter By Name");

        resetPassword.setText("Reset Password");
        resetPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetPasswordActionPerformed(evt);
            }
        });

        setRoleAdmin.setText("Set Role Admin");
        setRoleAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setRoleAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(filterByName, javax.swing.GroupLayout.PREFERRED_SIZE, 169,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(filterByUsername, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        121, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 48,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(sortBy, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 174, Short.MAX_VALUE))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout
                                                .createSequentialGroup()
                                                .addComponent(update_button, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(UpdatePassword)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(resetPassword, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(delete_button, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(add_button, javax.swing.GroupLayout.PREFERRED_SIZE, 112,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(setRoleAdmin)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lock)))
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(filterByName, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(filterByUsername, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2)
                                        .addComponent(sortBy, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(delete_button)
                                        .addComponent(update_button)
                                        .addComponent(UpdatePassword)
                                        .addComponent(add_button)
                                        .addComponent(resetPassword)
                                        .addComponent(setRoleAdmin)
                                        .addComponent(lock))
                                .addContainerGap()));
    }// </editor-fold>//GEN-END:initComponents

    private void reloadUserDetail() {
        try {
            // Truy vấn dữ liệu
            String query = """
                        SELECT
                            name AS Name,
                            username AS Username,
                            password_hash AS Password,
                            address AS Address,
                            date_of_birth AS DateOfBirth,
                            gender AS Gender,
                            email AS Email,
                            status AS Status,
                            is_locked AS `Lock`,
                            created_at AS CreationDate,
                            role
                        FROM
                            users
                    """;
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            // Lấy model từ bảng
            DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();

            // Xóa dữ liệu cũ nếu có
            model.setRowCount(0);

            // Thêm dữ liệu từ ResultSet vào bảng
            while (rs.next()) {
                Object[] row = new Object[] {
                        rs.getString("Name"),
                        rs.getString("Username"),
                        rs.getString("Password"),
                        rs.getString("Address"),
                        rs.getDate("DateOfBirth"),
                        rs.getString("Gender"),
                        rs.getString("Email"),
                        rs.getString("Status"),
                        rs.getBoolean("Lock"),
                        rs.getString("role"),
                        rs.getTimestamp("CreationDate")
                };
                model.addRow(row);
            }

            // Đóng kết nối
            rs.close();
            stmt.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error fetching data: " + e.getMessage(), "Database Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void setRoleAdminActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_setRoleAdminActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();

        int selectedRow = UserDetails.convertRowIndexToModel(UserDetails.getSelectedRow());
        if (selectedRow >= 0) {
            String currentRole = model.getValueAt(selectedRow, 9).toString();
            String currentUsername = model.getValueAt(selectedRow, 1).toString();

            // Kiểm tra xem vai trò hiện tại có phải là "admin" không
            if ("admin".equalsIgnoreCase(currentRole)) {
                // Thông báo rằng người dùng đã là admin
                JOptionPane.showMessageDialog(this, "User is already an admin.");
            } else {
                // Nếu không phải admin, yêu cầu cập nhật vai trò thành admin
                int result = JOptionPane.showConfirmDialog(this, "Do you want to promote this user to admin?",
                        "Promote to Admin", JOptionPane.YES_NO_OPTION);

                if (result == JOptionPane.YES_OPTION) {
                    // Cập nhật vai trò trong bảng
                    model.setValueAt("admin", selectedRow, 9); // Cập nhật cột vai trò (cột 9)

                    // Cập nhật vai trò trong cơ sở dữ liệu
                    String updateSQL = "UPDATE Users SET role = ? WHERE username = ?";
                    try (PreparedStatement pstmt = conn.prepareStatement(updateSQL)) {
                        // Gán giá trị cho câu lệnh
                        pstmt.setString(1, "admin");
                        pstmt.setString(2, currentUsername); // Sử dụng `currentUsername` để xác định bản ghi cũ

                        // Thực thi câu lệnh SQL
                        int rowsAffected = pstmt.executeUpdate();

                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(this, "User promoted to admin successfully!");
                        } else {
                            JOptionPane.showMessageDialog(this, "Error updating user.");
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a user to update.");
        }
    }// GEN-LAST:event_setRoleAdminActionPerformed

    private DefaultTableModel originalModel;

    private void UpdatePasswordActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_UpdatePasswordActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();

        int selectedRow = UserDetails.convertRowIndexToModel(UserDetails.getSelectedRow());

        if (selectedRow >= 0) {
            String currentPassword = model.getValueAt(selectedRow, 2).toString();
            String currentUsername = model.getValueAt(selectedRow, 1).toString();

            JTextField passwordField = new JTextField(currentPassword);

            JPanel updatePanel = new JPanel(new GridLayout(1, 2));
            updatePanel.add(new JLabel("Password:"));
            updatePanel.add(passwordField);

            int result = JOptionPane.showConfirmDialog(this, updatePanel, "Update Password",
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE);

            if (result == JOptionPane.OK_OPTION) {
                String newPassword = passwordField.getText();

                model.setValueAt(newPassword, selectedRow, 2);

                // Cập nhật dữ liệu vào cơ sở dữ liệu
                String updateSQL = "UPDATE Users SET password_hash = ? WHERE username = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(updateSQL)) {
                    // Gán giá trị cho câu lệnh
                    pstmt.setString(1, newPassword);
                    pstmt.setString(2, currentUsername); // Sử dụng `currentUsername` để xác định bản ghi cũ

                    // Thực thi câu lệnh SQL
                    int rowsAffected = pstmt.executeUpdate();

                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "User updated successfully!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Error updating user.");
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a user to update.");
        }
    }// GEN-LAST:event_UpdatePasswordActionPerformed

    private void statusActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_statusActionPerformed
        // TODO add your handling code here:
        String selectedOption = (String) status.getSelectedItem();

        if (selectedOption == null || selectedOption.isEmpty()) {
            // Nếu không có tùy chọn nào được chọn, không lọc và hiển thị toàn bộ dữ liệu
            return;
        }

        // Lấy model hiện tại của bảng UserDetails
        DefaultTableModel currentModel = (DefaultTableModel) UserDetails.getModel();

        // Tạo một model mới để chứa dữ liệu đã lọc
        DefaultTableModel filteredModel = new DefaultTableModel();

        // Sao chép cấu trúc cột từ model hiện tại
        for (int i = 0; i < currentModel.getColumnCount(); i++) {
            filteredModel.addColumn(currentModel.getColumnName(i));
        }

        // Xác định cột chứa "Status" (ở đây là cột thứ 7 - index 6)
        int statusColumnIndex = 7; // Bạn cần thay số này nếu cột Status nằm ở vị trí khác

        // Lọc các hàng dựa trên tùy chọn được chọn
        for (int i = 0; i < currentModel.getRowCount(); i++) {
            String rowStatus = (String) currentModel.getValueAt(i, statusColumnIndex);

            if (("online".equals(selectedOption) && "online".equalsIgnoreCase(rowStatus)) ||
                    ("offline".equals(selectedOption) && "offline".equalsIgnoreCase(rowStatus))) {
                // Sao chép hàng khớp vào model mới
                Object[] row = new Object[currentModel.getColumnCount()];
                for (int j = 0; j < currentModel.getColumnCount(); j++) {
                    row[j] = currentModel.getValueAt(i, j);
                }
                filteredModel.addRow(row);
            }
        }

        // Cập nhật lại bảng với model đã lọc
        UserDetails.setModel(filteredModel);
    }// GEN-LAST:event_statusActionPerformed

    private void filterByNameActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_filterByNameActionPerformed
        // TODO add your handling code here:
        String filterName = filterByName.getText().trim();
        String filterUsername = filterByUsername.getText().trim();

        if (originalModel == null) {
            // Lưu model gốc để sử dụng lại sau này
            originalModel = (DefaultTableModel) UserDetails.getModel();
        }

        DefaultTableModel model = originalModel;

        // Tạo một model mới để chứa dữ liệu đã lọc
        DefaultTableModel filteredModel = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return model.getColumnClass(columnIndex); // Sao chép kiểu dữ liệu từ model gốc
            }
        };

        // Sao chép cấu trúc cột từ model gốc
        for (int i = 0; i < model.getColumnCount(); i++) {
            filteredModel.addColumn(model.getColumnName(i));
        }

        // Duyệt qua các hàng của model gốc và lọc theo Name và Username
        for (int i = 0; i < model.getRowCount(); i++) {
            String name = model.getValueAt(i, 0).toString(); // Cột Name (giả định là cột 0)
            String username = model.getValueAt(i, 1).toString(); // Cột Username (giả định là cột 1)

            boolean matchesName = filterName.isEmpty() || name.toLowerCase().contains(filterName.toLowerCase());
            boolean matchesUsername = filterUsername.isEmpty()
                    || username.toLowerCase().contains(filterUsername.toLowerCase());

            // Nếu thỏa mãn điều kiện bộ lọc, thêm hàng vào model mới
            if (matchesName && matchesUsername) {
                Object[] row = new Object[model.getColumnCount()];
                for (int j = 0; j < model.getColumnCount(); j++) {
                    row[j] = model.getValueAt(i, j);
                }
                filteredModel.addRow(row);
            }
        }

        // Cập nhật lại bảng với model đã lọc
        UserDetails.setModel(filteredModel);

    }// GEN-LAST:event_filterByNameActionPerformed

    private void filterByUsernameActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_filterByUsernameActionPerformed
        // TODO add your handling code here:
        filterByNameActionPerformed(evt);

    }// GEN-LAST:event_filterByUsernameActionPerformed

    private void sortByActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_sortByActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();

        // Configure a TableRowSorter with custom comparators
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        UserDetails.setRowSorter(sorter);

        // Set a custom comparator for the "Creation Date" column (index 10)
        sorter.setComparator(10, (Object o1, Object o2) -> {
            try {
                java.sql.Timestamp ts1 = (java.sql.Timestamp) o1;
                java.sql.Timestamp ts2 = (java.sql.Timestamp) o2;
                return ts1.compareTo(ts2); // Compare timestamps directly
            } catch (ClassCastException ex) {
                Logger.getLogger(userDetail.class.getName()).log(Level.SEVERE, null, ex);
                return 0; // Treat errors as equal
            }
        });

        // Determine which column to sort based on the selected option
        String selectedOption = (String) sortBy.getSelectedItem();
        int columnIndex = -1;

        if ("Name".equals(selectedOption)) {
            columnIndex = 0; // Name column index
        } else if ("Creation Date".equals(selectedOption)) {
            columnIndex = 10; // Creation Date column index
        }

        // Apply sorting if a valid column is selected
        if (columnIndex != -1) {
            sorter.setSortKeys(Collections.singletonList(new RowSorter.SortKey(columnIndex, SortOrder.ASCENDING)));
            sorter.sort();
        }
    }// GEN-LAST:event_sortByActionPerformed

    private void resetPasswordActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_resetPasswordActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();
        int selectedRow = UserDetails.convertRowIndexToModel(UserDetails.getSelectedRow());

        String email = model.getValueAt(selectedRow, 6).toString();
        String currentUsername = model.getValueAt(selectedRow, 1).toString();

        if (email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter your email.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Gửi email và tự động cập nhật password trong database
            sendRandomPasswordToEmail.sendEmailWithGeneratedPassword(email, currentUsername);

            // Cập nhật giao diện
            reloadUserDetail();
            JOptionPane.showMessageDialog(this, "A new password has been sent to your email.", "Success",
                    JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to reset password: " + e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }// GEN-LAST:event_resetPasswordActionPerformed

    private void add_buttonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_add_buttonActionPerformed
        // TODO add your handling code here:
        JTextField usernameField = new JTextField(10);
        JTextField passwordField = new JTextField(10);
        JTextField nameField = new JTextField(10);
        JTextField addressField = new JTextField(10);
        JTextField dobField = new JTextField(10);
        JTextField genderField = new JTextField(10);
        JTextField emailField = new JTextField(10);

        JPanel addUserPanel = new JPanel();
        addUserPanel.setLayout(new GridLayout(7, 2));
        addUserPanel.add(new JLabel("Username:"));
        addUserPanel.add(usernameField);
        addUserPanel.add(new JLabel("Password:"));
        addUserPanel.add(passwordField);
        addUserPanel.add(new JLabel("Name:"));
        addUserPanel.add(nameField);
        addUserPanel.add(new JLabel("Address:"));
        addUserPanel.add(addressField);
        addUserPanel.add(new JLabel("Date of Birth:"));
        addUserPanel.add(dobField);
        addUserPanel.add(new JLabel("Gender:"));
        addUserPanel.add(genderField);
        addUserPanel.add(new JLabel("Email:"));
        addUserPanel.add(emailField);

        int result = JOptionPane.showConfirmDialog(this, addUserPanel, "Add New User", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            String username = usernameField.getText();
            String password = passwordField.getText();
            String name = nameField.getText();
            String address = addressField.getText();
            String dob = dobField.getText();
            String gender = genderField.getText();
            String email = emailField.getText();

            if (!username.isEmpty() && !name.isEmpty()) {
                if (originalModel == null) {
                    // Store the original model for later use
                    originalModel = (DefaultTableModel) UserDetails.getModel();
                }
                DefaultTableModel model = originalModel;
                TableRowSorter<?> sorter = (TableRowSorter<?>) UserDetails.getRowSorter();

                if (sorter != null) {
                    sorter.setSortKeys(null); // Reset sort keys
                    sorter.setSortable(0, false); // Disable sorting
                }
                model.addRow(new Object[] { username, name, password, address, dob, gender, email, "offline" });
                // if (sorter != null) {
                // sorter.setSortable(0, true); // Enable sorting lại nếu cần
                // }

                String sql = "INSERT INTO Users (username, name, address, date_of_birth, gender, email, password_hash) VALUES (?, ?, ?, ?, ?, ?, ?)";
                try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                    pstmt.setString(1, username);
                    pstmt.setString(2, name);
                    pstmt.setString(3, address);
                    pstmt.setString(4, dob);
                    pstmt.setString(5, gender);
                    pstmt.setString(6, email);
                    pstmt.setString(7, password);
                    pstmt.executeUpdate();

                    // Xóa các trường nhập liệu sau khi thêm
                    usernameField.setText("");
                    nameField.setText("");
                    addressField.setText("");
                    dobField.setText("");
                    passwordField.setText("");
                    genderField.setText("");
                    emailField.setText("");

                    JOptionPane.showMessageDialog(this, "User added successfully!");
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error adding user: " + e.getMessage());
                }
                reloadUserDetail();
            } else {
                JOptionPane.showMessageDialog(this, "Username and Name are required.");
            }

        }
    }// GEN-LAST:event_add_buttonActionPerformed

    private void update_buttonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_update_buttonActionPerformed
        DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();

        int selectedRow = UserDetails.convertRowIndexToModel(UserDetails.getSelectedRow());

        if (selectedRow >= 0) {
            String currentUsername = model.getValueAt(selectedRow, 1).toString();
            String currentName = model.getValueAt(selectedRow, 0).toString();
            String currentAddress = model.getValueAt(selectedRow, 3).toString();
            String currentDOB = model.getValueAt(selectedRow, 4).toString();
            String currentGender = model.getValueAt(selectedRow, 5).toString();
            String currentEmail = model.getValueAt(selectedRow, 6).toString();

            JTextField usernameField = new JTextField(currentUsername);
            JTextField nameField = new JTextField(currentName);
            JTextField addressField = new JTextField(currentAddress);
            JTextField dobField = new JTextField(currentDOB);
            JTextField genderField = new JTextField(currentGender);
            JTextField emailField = new JTextField(currentEmail);

            JPanel updatePanel = new JPanel(new GridLayout(6, 2));
            updatePanel.add(new JLabel("Username:"));
            updatePanel.add(usernameField);
            updatePanel.add(new JLabel("Name:"));
            updatePanel.add(nameField);
            updatePanel.add(new JLabel("Address:"));
            updatePanel.add(addressField);
            updatePanel.add(new JLabel("Date of Birth(yyyy-MM-dd):"));
            updatePanel.add(dobField);
            updatePanel.add(new JLabel("Gender:"));
            updatePanel.add(genderField);
            updatePanel.add(new JLabel("Email:"));
            updatePanel.add(emailField);

            int result = JOptionPane.showConfirmDialog(this, updatePanel, "Update User", JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE);

            if (result == JOptionPane.OK_OPTION) {
                String newUsername = usernameField.getText();
                String newName = nameField.getText();
                String newAddress = addressField.getText();
                String newDOB = dobField.getText();
                String newGender = genderField.getText();
                String newEmail = emailField.getText();

                model.setValueAt(newUsername, selectedRow, 1);
                model.setValueAt(newName, selectedRow, 0);
                model.setValueAt(newAddress, selectedRow, 3);
                model.setValueAt(newDOB, selectedRow, 4);
                model.setValueAt(newGender, selectedRow, 5);
                model.setValueAt(newEmail, selectedRow, 6);

                // Cập nhật dữ liệu vào cơ sở dữ liệu
                String updateSQL = "UPDATE Users SET username = ?, name = ?, address = ?, date_of_birth = ?, gender = ?, email = ? WHERE username = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(updateSQL)) {
                    // Gán giá trị cho câu lệnh
                    pstmt.setString(1, newUsername);
                    pstmt.setString(2, newName);
                    pstmt.setString(3, newAddress);
                    pstmt.setString(4, newDOB);
                    pstmt.setString(5, newGender);
                    pstmt.setString(6, newEmail);
                    pstmt.setString(7, currentUsername); // Sử dụng `currentUsername` để xác định bản ghi cũ

                    // Thực thi câu lệnh SQL
                    int rowsAffected = pstmt.executeUpdate();

                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(this, "User updated successfully!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Error updating user.");
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a user to update.");
        }
    }// GEN-LAST:event_update_buttonActionPerformed

    private void delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_delete_buttonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();

        int selectedRow = UserDetails.convertRowIndexToModel(UserDetails.getSelectedRow());
        String username = (String) model.getValueAt(selectedRow, 1);
        if (selectedRow >= 0) {
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this user?",
                    "Confirm Delete", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                String deleteUserSql = "DELETE FROM Users WHERE username = ?";
                try (PreparedStatement pstmt2 = conn.prepareStatement(deleteUserSql)) {
                    pstmt2.setString(1, username);
                    System.out.println("Deleting user with username: " + username);
                    pstmt2.executeUpdate();

                    // Remove the user from the JTable
                    model.removeRow(selectedRow);

                    JOptionPane.showMessageDialog(this, "User and related data deleted successfully!");
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error deleting user and related data: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a user to delete.");
        }
    }// GEN-LAST:event_delete_buttonActionPerformed

    private void lockActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();

        int selectedRow = UserDetails.convertRowIndexToModel(UserDetails.getSelectedRow());

        if (selectedRow != -1) {
            Boolean lock = (Boolean) model.getValueAt(selectedRow, 8);
            Boolean newLock = !lock;
            model.setValueAt(newLock, selectedRow, 8);

            // Get the username for database identification
            String username = model.getValueAt(selectedRow, 1).toString();

            // Update the database

            String sql = "UPDATE Users SET is_locked = ? WHERE username = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setBoolean(1, newLock); // Set the new lock value
                pstmt.setString(2, username); // Identify the user by username
                int rowsAffected = pstmt.executeUpdate();

                if (rowsAffected > 0) {
                    System.out.println("Database updated successfully for user: " + username);
                } else {
                    System.out.println("No rows updated for user: " + username);
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error updating database: " + e.getMessage());
            }
        } else {
            System.out.println("No row selected.");
        }
    }// GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton UpdatePassword;
    private javax.swing.JTable UserDetails;
    private javax.swing.JButton add_button;
    private javax.swing.JButton delete_button;
    private javax.swing.JTextField filterByName;
    private javax.swing.JTextField filterByUsername;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lock;
    private javax.swing.JButton resetPassword;
    private javax.swing.JButton setRoleAdmin;
    private javax.swing.JComboBox<String> sortBy;
    private javax.swing.JComboBox<String> status;
    private javax.swing.JButton update_button;
    // End of variables declaration//GEN-END:variables
}
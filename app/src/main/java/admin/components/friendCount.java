/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package admin.components;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

import server.config.ConfigUtil;

/**
 *
 * @author Nghiax
 */
public class friendCount extends javax.swing.JPanel {
    private String url;
    private String username;
    private String password;
    private Connection conn;

    /**
     * Creates new form friendCount
     */
    public friendCount() {
        try {
            // Create an instance of ConfigUtil
            ConfigUtil configUtil = new ConfigUtil();
            // Access configuration values
            url = configUtil.getString("url");
            System.out.println("url" + url);
            username = configUtil.getString("username");
            password = configUtil.getString("password");
            conn = DriverManager.getConnection(url, username, password);
        } catch (Exception e) {
            // Handle the exception
            e.printStackTrace();
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane6 = new javax.swing.JScrollPane();
        FriendCount = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        SortBy = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        filterByName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        DirectFriend = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        filterBy = new javax.swing.JComboBox<>();

        FriendCount.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {

                },
                new String[] {
                        "Username", "Direct Friends Count", "Total Friends Count", "Creation Date"
                }) {
            Class[] types = new Class[] {
                    java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[] {
                    false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        try {
            // Truy vấn dữ liệu
            String query = """
                                                                                WITH DirectFriends AS (
                                            -- Lấy tất cả bạn trực tiếp của mỗi user
                                            SELECT
                                                user_id AS current_user_id,
                                                friend_id
                                            FROM (
                                                SELECT
                                                    uf.user_id_1 AS user_id,
                                                    uf.user_id_2 AS friend_id
                                                FROM User_Friends uf
                                                WHERE uf.status = 'friends'
                                                UNION ALL
                                                SELECT
                                                    uf.user_id_2 AS user_id,
                                                    uf.user_id_1 AS friend_id
                                                FROM User_Friends uf
                                                WHERE uf.status = 'friends'
                                            ) AS all_friends
                                        ),
                                        FriendsOfFriends AS (
                                            -- Lấy bạn của bạn, loại trừ user gốc
                                            SELECT DISTINCT
                                                df.current_user_id,
                                                df2.friend_id AS fof_id
                                            FROM DirectFriends df
                                            INNER JOIN DirectFriends df2
                                                ON df.friend_id = df2.current_user_id
                                            WHERE df2.friend_id != df.current_user_id
                                        )
                                        -- Kết quả cuối cùng: thông tin user và thống kê bạn bè
                                        SELECT
                                            u.user_id,
                                            u.username,
                                            u.created_at,
                                            COALESCE((
                                                SELECT COUNT(*)
                                                FROM DirectFriends df
                                                WHERE df.current_user_id = u.user_id
                                            ), 0) AS total_direct_friends,
                                            COALESCE((
                                                SELECT COUNT(*)
                                                FROM FriendsOfFriends fof
                                                WHERE fof.current_user_id = u.user_id
                                            ), 0) AS total_friends_of_friends
                                        FROM Users u
                                        ORDER BY u.user_id;
                    """;

            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();

            // Lấy model từ bảng
            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) FriendCount.getModel();

            // Xóa dữ liệu cũ nếu có
            model.setRowCount(0);

            // Thêm dữ liệu từ ResultSet vào bảng
            while (rs.next()) {
                Object[] row = new Object[] {
                        rs.getString("username"),
                        rs.getInt("total_direct_friends"),
                        rs.getInt("total_friends_of_friends") + rs.getInt("total_direct_friends"),
                        rs.getTimestamp("created_at"), // Adjust if necessary
                };
                model.addRow(row);
            }

            // Đóng kết nối
            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error fetching data: " + e.getMessage(), "Database Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        jScrollPane6.setViewportView(FriendCount);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Sort by:");

        SortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name", "Creation Date" }));
        SortBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortByActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Filter by name:");

        filterByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByNameActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Filter by direct friend:");

        DirectFriend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirectFriendActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Filter by:");

        filterBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "=", ">", "<" }));
        filterBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterByActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane6)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout
                                                .createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(filterByName, javax.swing.GroupLayout.PREFERRED_SIZE, 112,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(DirectFriend, javax.swing.GroupLayout.PREFERRED_SIZE, 54,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(filterBy, javax.swing.GroupLayout.PREFERRED_SIZE, 52,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74,
                                                        Short.MAX_VALUE)
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(SortBy, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel7)
                                                .addComponent(filterBy, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel6)
                                                .addComponent(DirectFriend, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel5)
                                                .addComponent(filterByName, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel4)
                                                .addComponent(SortBy, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(5, 5, 5)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                                .addContainerGap()));
    }// </editor-fold>//GEN-END:initComponents

    private DefaultTableModel originalModel;

    private void filterByNameActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_filterByNameActionPerformed
        // TODO add your handling code here:
        String filterName = filterByName.getText().trim();

        if (!filterName.isEmpty()) {
            if (originalModel == null) {
                originalModel = (DefaultTableModel) FriendCount.getModel();
            }
            DefaultTableModel model = originalModel;

            DefaultTableModel filteredModel = new DefaultTableModel();

            for (int i = 0; i < model.getColumnCount(); i++) {
                filteredModel.addColumn(model.getColumnName(i));
            }

            for (int i = 0; i < model.getRowCount(); i++) {
                String name = model.getValueAt(i, 0).toString(); // Assuming Name is in column 0
                if (name.toLowerCase().contains(filterName.toLowerCase())) {
                    filteredModel.addRow(new Object[] {
                            model.getValueAt(i, 0), // Name
                            model.getValueAt(i, 1), // Creation Date
                            model.getValueAt(i, 2),
                            model.getValueAt(i, 3)
                    });
                }
            }

            FriendCount.setModel(filteredModel);
        } else {
            FriendCount.setModel(originalModel);
        }
    }// GEN-LAST:event_filterByNameActionPerformed

    private void DirectFriendActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_DirectFriendActionPerformed
        // TODO add your handling code here:
        String directFriend = DirectFriend.getText().trim().isEmpty() ? "0" : DirectFriend.getText().trim();
        ;
        String _filterBy = (String) filterBy.getSelectedItem();// =, > , <

        if (!directFriend.isEmpty()) {
            try {
                int directFriendValue = Integer.parseInt(directFriend);

                if (originalModel == null) {
                    originalModel = (DefaultTableModel) FriendCount.getModel();
                }

                DefaultTableModel model = originalModel;

                DefaultTableModel filteredModel = new DefaultTableModel();

                for (int i = 0; i < model.getColumnCount(); i++) {
                    filteredModel.addColumn(model.getColumnName(i));
                }

                for (int i = 0; i < model.getRowCount(); i++) {
                    int friendsCount = Integer.parseInt(model.getValueAt(i, 1).toString());

                    boolean matches = false;
                    switch (_filterBy) {
                        case "=" -> matches = friendsCount == directFriendValue;
                        case ">" -> matches = friendsCount > directFriendValue;
                        case "<" -> matches = friendsCount < directFriendValue;
                    }

                    if (matches) {
                        Object[] rowData = new Object[model.getColumnCount()];
                        for (int j = 0; j < model.getColumnCount(); j++) {
                            rowData[j] = model.getValueAt(i, j);
                        }
                        filteredModel.addRow(rowData);
                    }
                }

                FriendCount.setModel(filteredModel);

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Please enter a valid number.", "Invalid Input",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            FriendCount.setModel(originalModel);
        }
    }// GEN-LAST:event_DirectFriendActionPerformed

    private void filterByActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_filterByActionPerformed
        // TODO add your handling code here:
        DirectFriendActionPerformed(evt);
    }// GEN-LAST:event_filterByActionPerformed

    private void SortByActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_SortByActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) FriendCount.getModel();

        // Configure a TableRowSorter with custom comparators
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        FriendCount.setRowSorter(sorter);

        // Set a custom comparator for the "Creation Date" column
        sorter.setComparator(3, (Object o1, Object o2) -> {
            try {
                // Cast the objects to Timestamp
                java.sql.Timestamp ts1 = (java.sql.Timestamp) o1;
                java.sql.Timestamp ts2 = (java.sql.Timestamp) o2;

                // Compare the Timestamps directly
                return ts1.compareTo(ts2);
            } catch (ClassCastException ex) {
                Logger.getLogger(userDetail.class.getName()).log(Level.SEVERE, null, ex);
                return 0; // Treat any errors (like ClassCastException) as equal
            }
        });

        // Determine which column to sort
        String selectedOption = (String) SortBy.getSelectedItem();
        int columnIndex = -1;

        if ("Name".equals(selectedOption)) {
            columnIndex = 0;
        } else if ("Creation Date".equals(selectedOption)) {
            columnIndex = 3;
        }

        // Apply sorting if a valid column is selected
        if (columnIndex != -1) {
            sorter.setSortKeys(Collections.singletonList(new RowSorter.SortKey(columnIndex, SortOrder.ASCENDING)));
            sorter.sort();
        }
    }// GEN-LAST:event_SortByActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DirectFriend;
    private javax.swing.JTable FriendCount;
    private javax.swing.JComboBox<String> SortBy;
    private javax.swing.JComboBox<String> filterBy;
    private javax.swing.JTextField filterByName;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane6;
    // End of variables declaration//GEN-END:variables
}

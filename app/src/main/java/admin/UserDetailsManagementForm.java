/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package admin;

import java.awt.GridLayout;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nghiax
 */
public class UserDetailsManagementForm extends javax.swing.JFrame {

    /**
     * Creates new form UserManagementForm
     */
    public UserDetailsManagementForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        UserDetails = new javax.swing.JTable();
        add_button = new javax.swing.JButton();
        update_button = new javax.swing.JButton();
        delete_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UserDetails");

        UserDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"test1", "Nghia", "None", "16-09-2004", "Male", "None"},
                {"test2", "An", "None", "None", "Male", "None"}
            },
            new String [] {
                "Username", "Name", "Address", "Date-of-birth", "Gender", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(UserDetails);

        add_button.setText("Add");
        add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_buttonActionPerformed(evt);
            }
        });

        update_button.setText("Update");
        update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_buttonActionPerformed(evt);
            }
        });

        delete_button.setText("Delete");
        delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(249, Short.MAX_VALUE)
                .addComponent(add_button)
                .addGap(18, 18, 18)
                .addComponent(update_button)
                .addGap(18, 18, 18)
                .addComponent(delete_button)
                .addGap(19, 19, 19))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(13, 13, 13)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(13, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(298, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(update_button)
                    .addComponent(add_button)
                    .addComponent(delete_button)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(26, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_buttonActionPerformed
        // TODO add your handling code here:
        JTextField usernameField = new JTextField(10);
        JTextField nameField = new JTextField(10);
        JTextField addressField = new JTextField(10);
        JTextField dobField = new JTextField(10);
        JTextField genderField = new JTextField(10);
        JTextField emailField = new JTextField(10);

        JPanel addUserPanel = new JPanel();
        addUserPanel.setLayout(new GridLayout(6, 2));
        addUserPanel.add(new JLabel("Username:"));
        addUserPanel.add(usernameField);
        addUserPanel.add(new JLabel("Name:"));
        addUserPanel.add(nameField);
        addUserPanel.add(new JLabel("Address:"));
        addUserPanel.add(addressField);
        addUserPanel.add(new JLabel("Date of Birth:"));
        addUserPanel.add(dobField);
        addUserPanel.add(new JLabel("Gender:"));
        addUserPanel.add(genderField);
        addUserPanel.add(new JLabel("Email:"));
        addUserPanel.add(emailField);

        // Hiển thị hộp thoại yêu cầu người dùng nhập thông tin
        int result = JOptionPane.showConfirmDialog(this, addUserPanel, "Add New User", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        // Nếu người dùng nhấn OK, lấy dữ liệu và thêm vào bảng
        if (result == JOptionPane.OK_OPTION) {
            String username = usernameField.getText();
            String name = nameField.getText();
            String address = addressField.getText();
            String dob = dobField.getText();
            String gender = genderField.getText();
            String email = emailField.getText();

            // Kiểm tra xem tên người dùng và tên có trống không
            if (!username.isEmpty() && !name.isEmpty()) {
                // Thêm người dùng vào bảng
                DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();
                model.addRow(new Object[]{username, name, address, dob, gender, email});

                // Xóa các trường nhập liệu sau khi thêm
                usernameField.setText("");
                nameField.setText("");
                addressField.setText("");
                dobField.setText("");
                genderField.setText("");
                emailField.setText("");

                JOptionPane.showMessageDialog(this, "User added successfully!");
            } else {
                JOptionPane.showMessageDialog(this, "Username and Name are required.");
            }
        }   
    }//GEN-LAST:event_add_buttonActionPerformed

    private void delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_buttonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();

        // Lấy hàng được chọn
        int selectedRow = UserDetails.getSelectedRow();

        // Kiểm tra xem có hàng nào được chọn không
        if (selectedRow >= 0) {
            // Hiển thị hộp thoại xác nhận
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this user?", "Confirm Delete", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                // Xóa hàng khỏi bảng
                model.removeRow(selectedRow);
                JOptionPane.showMessageDialog(this, "User deleted successfully!");
            }
        } else {
            // Thông báo nếu không có hàng nào được chọn
            JOptionPane.showMessageDialog(this, "Please select a user to delete.");
        }
    }//GEN-LAST:event_delete_buttonActionPerformed

    private void update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_buttonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) UserDetails.getModel();

        // Lấy hàng được chọn
        int selectedRow = UserDetails.getSelectedRow();

        // Kiểm tra xem có hàng nào được chọn không
        if (selectedRow >= 0) {
            // Lấy thông tin hiện tại từ hàng đã chọn
            String currentUsername = model.getValueAt(selectedRow, 0).toString();
            String currentName = model.getValueAt(selectedRow, 1).toString();
            String currentAddress = model.getValueAt(selectedRow, 2).toString();
            String currentDOB = model.getValueAt(selectedRow, 3).toString();
            String currentGender = model.getValueAt(selectedRow, 4).toString();
            String currentEmail = model.getValueAt(selectedRow, 5).toString();

            // Tạo các trường để nhập thông tin mới
            JTextField usernameField = new JTextField(currentUsername);
            JTextField nameField = new JTextField(currentName);
            JTextField addressField = new JTextField(currentAddress);
            JTextField dobField = new JTextField(currentDOB);
            JTextField genderField = new JTextField(currentGender);
            JTextField emailField = new JTextField(currentEmail);

            // Tạo panel và thêm các trường vào panel
            JPanel updatePanel = new JPanel(new GridLayout(6, 2));
            updatePanel.add(new JLabel("Username:"));
            updatePanel.add(usernameField);
            updatePanel.add(new JLabel("Name:"));
            updatePanel.add(nameField);
            updatePanel.add(new JLabel("Address:"));
            updatePanel.add(addressField);
            updatePanel.add(new JLabel("Date of Birth:"));
            updatePanel.add(dobField);
            updatePanel.add(new JLabel("Gender:"));
            updatePanel.add(genderField);
            updatePanel.add(new JLabel("Email:"));
            updatePanel.add(emailField);

            // Hiển thị hộp thoại để nhập thông tin cập nhật
            int result = JOptionPane.showConfirmDialog(this, updatePanel, "Update User", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

            if (result == JOptionPane.OK_OPTION) {
                // Lấy dữ liệu mới từ các trường
                String newUsername = usernameField.getText();
                String newName = nameField.getText();
                String newAddress = addressField.getText();
                String newDOB = dobField.getText();
                String newGender = genderField.getText();
                String newEmail = emailField.getText();

                // Cập nhật dữ liệu trong mô hình bảng
                model.setValueAt(newUsername, selectedRow, 0);
                model.setValueAt(newName, selectedRow, 1);
                model.setValueAt(newAddress, selectedRow, 2);
                model.setValueAt(newDOB, selectedRow, 3);
                model.setValueAt(newGender, selectedRow, 4);
                model.setValueAt(newEmail, selectedRow, 5);

                JOptionPane.showMessageDialog(this, "User updated successfully!");
            }
        } else {
            // Thông báo nếu không có hàng nào được chọn
            JOptionPane.showMessageDialog(this, "Please select a user to update.");
        }
    }//GEN-LAST:event_update_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserDetailsManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserDetailsManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserDetailsManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserDetailsManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserDetailsManagementForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable UserDetails;
    private javax.swing.JButton add_button;
    private javax.swing.JButton delete_button;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton update_button;
    // End of variables declaration//GEN-END:variables
}

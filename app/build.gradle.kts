/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id("application") // Enables application plugin
    id("java") // Java plugin for building Java projects
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)

    implementation("com.formdev:flatlaf:2.5")

    implementation("mysql:mysql-connector-java:8.0.33")

    implementation("com.formdev:flatlaf:2.5")

    implementation(files("libs/miglayout-core.jar"))
    implementation(files("libs/miglayout-swing.jar"))

    implementation("com.miglayout:miglayout-swing:5.3")

}

tasks.withType<Copy> {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}


// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

application {
    // Define the main class for the application.
    mainClass = "user.main"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.register<JavaExec>("runUser") {
    group = "application"
    mainClass.set("user.main")
    classpath = sourceSets["main"].runtimeClasspath
}

tasks.register<JavaExec>("runAdmin") {
    group = "application"
    mainClass.set("admin.main")
    classpath = sourceSets["main"].runtimeClasspath
}

tasks.register<JavaExec>("runServer") {
    group = "application"
    mainClass.set("server.main")
    classpath = sourceSets["main"].runtimeClasspath
}

defaultTasks("runUser")

sourceSets {
    main {
        java.srcDirs("src/main/java")
        resources.srcDirs("src/main/resources")
    }
    test {
        java.srcDirs("src/test/java")
        resources.srcDirs("src/test/resources")
    }
}